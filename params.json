{"name":"JKlout2","tagline":"","body":"# jklout2 - Klout API v2 Java Wrapper\r\n===================================\r\n\r\nThis is a java library to use the [Klout REST API V2](http://klout.com/s/developers/v2). \r\n\r\nBuild status\r\n------------\r\n[![Build Status](https://buildhive.cloudbees.com/job/nbartels/job/jklout2/badge/icon)](https://buildhive.cloudbees.com/job/nbartels/job/jklout2/)\r\n\r\nFunctionality\r\n-------------\r\n* id mapping is supported\r\n* influence, topics and score can be retrieved\r\n\r\nDependencies\r\n------------\r\n * [gson library](https://code.google.com/p/google-gson/) to parse the json and generated POJOs\r\n * junit4 and [mockito](https://code.google.com/p/mockito/) for unittesting (not needed in productive environment)\r\n\r\nCode examples\r\n-------------\r\nUsing the Klout API v2 Java Wrapper is rather easy. Of course you need the API Key. \r\n\r\n```java\r\n\r\nString apiKey = \"<apikey>\";\r\nKlout kloutClient = new KloutFactory().setKloutAPIkey(apiKey).build();\r\n```\r\n\r\nNow we have a instance of the Klout object and can work with it. Have a look at the interface.\r\n\r\nRoadmap\r\n-------\r\n* ~~add the mapping api (twitter, google plus to kloutid)~~\r\n* ~~add unittests (incl. property file for the klout id)~~\r\n* ~~remove code duplications and move the http connection code to some class~~\r\n* ~~add mocking to unittests~~\r\n* ~~clean up the type classes (innerEntity is not nice and rather useless)~~\r\n* ~~move type classes to model package and add some package for classes that are no implementation and no model~~\r\n* add example code snippets\r\n* add deployment to github in pom.xml (or deployment via buildhive)\r\n* add some reporting to the pom.xml (coverage, pmd, ...)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}